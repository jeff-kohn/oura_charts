///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/button.h>
#include <wx/sizer.h>
#include <wx/statbox.h>

#include "ChartOptionsBase.h"

using namespace oura_charts;

bool ChartOptionsBase::Create(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size,
    long style, const wxString& name)
{

    if (!wxPanel::Create(parent, id, pos, size, style, name))
        return false;

    auto* box_sizer = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer2 = new wxBoxSizer(wxHORIZONTAL);

    auto* box_sizer7 = new wxBoxSizer(wxVERTICAL);

    auto* static_box = new wxStaticBoxSizer(wxHORIZONTAL, this, "Date Range");

    static_box->AddSpacer(6);

    auto* static_text = new wxStaticText(static_box->GetStaticBox(), wxID_ANY, "Start Date:");
    static_box->Add(static_text, wxSizerFlags().Center().Border(wxALL));

    m_start_date = new wxDatePickerCtrl(static_box->GetStaticBox(), wxID_ANY, wxDefaultDateTime,
        wxDefaultPosition, wxDefaultSize, wxDP_DROPDOWN|wxDP_SHOWCENTURY);
    static_box->Add(m_start_date, wxSizerFlags(5).Expand().Border(wxALL));

    auto* static_text2 = new wxStaticText(static_box->GetStaticBox(), wxID_ANY, "End Date:");
    static_box->Add(static_text2, wxSizerFlags().Center().Border(wxALL));

    m_end_date = new wxDatePickerCtrl(static_box->GetStaticBox(), wxID_ANY, wxDefaultDateTime,
        wxDefaultPosition, wxDefaultSize, wxDP_DROPDOWN|wxDP_SHOWCENTURY);
    static_box->Add(m_end_date, wxSizerFlags(5).Border(wxALL));

    static_box->AddSpacer(5);

    box_sizer7->Add(static_box, wxSizerFlags().DoubleBorder(wxALL));

    box_sizer2->Add(box_sizer7, wxSizerFlags().Border(wxALL));

    auto* box_sizer5 = new wxBoxSizer(wxVERTICAL);

    box_sizer5->AddSpacer(18 + wxSizerFlags::GetDefaultBorder());

    auto* btn4 = new wxButton(this, wxID_ANY, "&Run Query");
    btn4->SetMinSize(ConvertDialogToPixels(wxSize(48, -1)));
    box_sizer5->Add(btn4, wxSizerFlags().Center().Border(wxRIGHT|wxTOP|wxBOTTOM, 15));

    box_sizer2->Add(box_sizer5, wxSizerFlags());

    box_sizer->Add(box_sizer2, wxSizerFlags().Expand().Border(wxALL));

    auto* box_sizer3 = new wxBoxSizer(wxHORIZONTAL);

    auto* box_sizer6 = new wxBoxSizer(wxVERTICAL);

    m_static_text = new wxStaticText(this, wxID_ANY, "Data Fields:");
    box_sizer6->Add(m_static_text,
        wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_data_view_ctrl = new wxDataViewCtrl(this, wxID_ANY);
    m_data_view_ctrl->SetMinSize(ConvertDialogToPixels(wxSize(200, 50)));
    box_sizer6->Add(m_data_view_ctrl, wxSizerFlags(1).Expand().Border(wxALL));

    box_sizer3->Add(box_sizer6, wxSizerFlags().Border(wxALL));

    auto* box_sizer4 = new wxBoxSizer(wxVERTICAL);

    box_sizer4->AddSpacer(25);

    auto* btn = new wxButton(this, wxID_ANY, "&Add...");
    btn->SetMinSize(ConvertDialogToPixels(wxSize(48, -1)));
    box_sizer4->Add(btn, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    auto* btn3 = new wxButton(this, wxID_ANY, "&Edit...");
    btn3->SetMinSize(ConvertDialogToPixels(wxSize(48, -1)));
    box_sizer4->Add(btn3, wxSizerFlags().Border(wxLEFT|wxRIGHT, wxSizerFlags::GetDefaultBorder()));

    auto* btn2 = new wxButton(this, wxID_ANY, "&Delete...");
    btn2->SetMinSize(ConvertDialogToPixels(wxSize(48, -1)));
    box_sizer4->Add(btn2, wxSizerFlags().Border(wxLEFT|wxRIGHT, wxSizerFlags::GetDefaultBorder()));

    box_sizer3->Add(box_sizer4, wxSizerFlags());

    box_sizer->Add(box_sizer3, wxSizerFlags(1).Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, 10));

    SetSizerAndFit(box_sizer);

    // Event handlers
    btn->Bind(wxEVT_BUTTON, &ChartOptionsBase::onAddClicked, this);
    btn2->Bind(wxEVT_BUTTON, &ChartOptionsBase::onDeleteClicked, this);
    btn3->Bind(wxEVT_BUTTON, &ChartOptionsBase::onEditClicked, this);
    btn4->Bind(wxEVT_BUTTON, &ChartOptionsBase::onRunQuery, this);
    m_end_date->Bind(wxEVT_DATE_CHANGED, &ChartOptionsBase::onEndDateSelected, this);
    m_start_date->Bind(wxEVT_DATE_CHANGED, &ChartOptionsBase::onStartDateSelected, this);
    btn2->Bind(wxEVT_UPDATE_UI, &ChartOptionsBase::onDeleteUpdateUI, this);
    btn3->Bind(wxEVT_UPDATE_UI, &ChartOptionsBase::onEditUpdateUI, this);
    btn4->Bind(wxEVT_UPDATE_UI, &ChartOptionsBase::onRunQueryUpdateUI, this);

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************
