name: Static Code Analysis and Code Coverage

on:
  push:
    paths-ignore:
      - 'README.md'
      - '**/.gitignore'

env:
  REPO_DIR: "${{ github.workspace }}"
  GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

permissions:
  security-events: write
  contents: write
  packages: read
  checks: write
      
jobs:
  analyze:
    name: 'Static Code Analysis'
    runs-on: 'ubuntu-24.04'
    timeout-minutes: 75
    env:
      VCPKG_INSTALLATION_ROOT: "${{ github.workspace }}/vcpkg"
      VCPKG_FEATURE_FLAGS: "dependencygraph"
      DOTNET_ROLL_FORWARD: "latestMajor"
      CONFIGURE_PRESET: "linux-clang"
      BUILD_PRESET: "release"
      BUILD_DIR: "${{ github.workspace }}/builds"
      SARIF_DIR: "${{ github.workspace }}/sarif-results"

    permissions:
      security-events: write
      contents: write
      packages: read

    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
         sudo apt update && sudo apt-get install -y cppcheck autoconf automake libtool pkg-config bison flex nasm libx11-dev libxft-dev libxext-dev libxrandr-dev libltdl-dev libwayland-dev libxkbcommon-dev libegl1-mesa-dev libxtst-dev libselinux1-dev libsecret-1-dev
         sudo curl -sSL https://github.com/psastras/sarif-rs/releases/download/clang-tidy-sarif-latest/clang-tidy-sarif-x86_64-unknown-linux-gnu -o /usr/local/bin/clang-tidy-sarif
         sudo chmod +x /usr/local/bin/clang-tidy-sarif
         sudo curl -sSL https://github.com/psastras/sarif-rs/releases/download/sarif-fmt-latest/sarif-fmt-x86_64-unknown-linux-gnu -o /usr/local/bin/sarif-fmt
         sudo chmod +x /usr/local/bin/sarif-fmt
         dotnet tool install --global Sarif.Multitool
    
      # Setup Cmake, Ninja, and VCPKG
    - uses: lukka/get-cmake@latest
    - uses: lukka/run-vcpkg@v11.5
      with:
        vcpkgJsonGlob: 'vcpkg.json'

      # Initializes the CodeQL tools for scanning.
    - name: 'Initialize CodeQL'
      uses: github/codeql-action/init@v3
      with:
        config-file: tools/codeql/config_default.yml
        languages: 'c-cpp'
        build-mode: 'manual'

    - name: 'Run Build'
      shell: bash
      run: |
        cmake --preset=$CONFIGURE_PRESET
        cmake --build --preset=$BUILD_PRESET --target=all

    - name: 'Perform CodeQL Analysis'
      uses: github/codeql-action/analyze@v3
      with:
        category: cpp
        output: ${{ env.SARIF_DIR }}
        upload: failure-only

    - name: 'Filter vcpkg lib code from codeql results'
      uses: advanced-security/filter-sarif@v1
      with:
        patterns: |
          -**/vcpkg*/**/*
          -**/CMakeFiles/CMakeScratch/**/*
          -**/_deps/**/*
        input: $SARIF_DIR/cpp.sarif
        output: $SARIF_DIR/cpp.sarif

    - name: 'Run clang-tidy and CppCheck'
      run: |
        scripts/build.sh --preset $BUILD_PRESET --target code_analysis --build

    - name: 'Convert CppCheck XML to SARIF'
      run: |
        scripts/trim_repo_paths.sh --input-file "$BUILD_DIR/cppcheck_results.xml" --repo-path "$REPO_DIR/" --backup
        $HOME/.dotnet/tools/sarif convert $BUILD_DIR/cppcheck_results.xml --tool CppCheck --output $SARIF_DIR/cpp-cppcheck.sarif

    - name: 'Copy clang-tidy results'
      run: |
         cp $BUILD_DIR/clang_tidy_results.sarif $SARIF_DIR/cpp-clang-tidy.sarif

    - name: 'Upload SARIF'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ env.SARIF_DIR }}
        category: cpp

    - name: Upload SARIF Artifact
      uses: actions/upload-artifact@v4
      with:
        name: sarif-results
        path: ${{ env.SARIF_DIR }}
        retention-days: 10

  coverage:
    name: 'Code Coverage'
    runs-on: 'windows-latest'
    timeout-minutes: 20
    env:
      VCPKG_INSTALLATION_ROOT: "${{ github.workspace }}\\vcpkg"
      CONFIGURE_PRESET: "win-msvc"
      BUILD_PRESET: "release"
      BUILD_DIR: "${{ github.workspace }}/builds"
      SARIF_DIR: "${{ github.workspace }}/sarif-results"

    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4

    - name: 'Set vcvars'
      uses: ilammy/msvc-dev-cmd@v1

      # Setup Cmake, Ninja, and VCPKG
    - uses: lukka/get-cmake@latest
    - uses: lukka/run-vcpkg@v11.5
      with:
        vcpkgJsonGlob: 'vcpkg.json'

    - name: Install winget
      uses: Cyberboss/install-winget@v1

    - name: Install pre-reqs
      run: |
        winget install CppCheck --verbose --disable-interactivity --accept-source-agreements --accept-package-agreements
        choco install OpenCppCoverage -y

    - name: 'Run Build'
      run: |
        cmake --preset=$env:CONFIGURE_PRESET
        cmake --build --preset=$env:BUILD_PRESET --target=all
    
    - name: "Run Code Coverage"
      run: |
        scripts/Run-CodeCoverage.ps1 -Preset $env:BUILD_PRESET

    - name: "Publish Coverage Report"
      uses: 5monkeys/cobertura-action@master
      with:
        path: ${{ env.REPO_DIR }}\builds\code_coverage.xml
        minimum_coverage: 50

    - name: Upload Coverage Artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-results
        retention-days: 10
        path: |
          ${{ env.REPO_DIR }}\builds\code_coverage.xml
          ${{ env.REPO_DIR }}\builds\code_coverage_html

